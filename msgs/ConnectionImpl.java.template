package $package;

import com.chat.BinaryStream;
import com.chat.msgs.ValidationError;

import java.io.IOException;

import static com.chat.msgs.Utilities.*;

public class ${clientOrServer}ConnectionImpl implements ${clientOrServer}Connection {
    private final BinaryStream stream;
    private final String uuid;
    private final int apiVersion;

    public ${clientOrServer}ConnectionImpl(BinaryStream stream, String UUID, int APIVersion) {
       this.stream = stream; 
       this.uuid = UUID;
       this.apiVersion = APIVersion;
    }

    @Override
    public String getUUID() {
       return uuid;
    }

    @Override
    public int getAPIVersion() {
        return apiVersion;
    }

    @Override 
    public MessageTypes recvMsgType() throws IOException, ValidationError {
        stream.startReading();
        byte msgTypeByte = stream.readByte();
        MessageTypes msgType = MessageTypes.lookup(msgTypeByte);

        if (msgType == null)
            throw new ValidationError("Unknown message type: " + (int)msgTypeByte);

        return msgType;        
    }

    @Override
    public void close() {
        stream.close();
    }

    @Override
    public String toString() {
        return stream.toString();
    }
#for $msg in $recvMsgs

    @Override
    public ${msg.name}Message recv${msg.name}() throws IOException {
    #for $field in $msg.fields
        $field.type $field.name = stream.read${field.type.capitalize()}();  
    #end for 
        stream.finishReading();
                
        return new ${msg.name}Message(#echo ', '.join($msg.fieldNames)#);
    }
#end for
#for $msg in $sendMsgs
    
    @Override
    public void send${msg.name}(${msg.name}Message msg) throws IOException {
        /*synchronized(stream) {
            stream.startWriting(${msg.length});
            stream.writeByte(MessageTypes.${msg.name}.getValue());
        #for $field in $msg.fields
            stream.write${field.type.capitalize()}(msg.get${field.nameCap}());
        #end for
            stream.finishWriting();
        }*/
        stream.queueMessage(msg);
    }
#end for    
}
